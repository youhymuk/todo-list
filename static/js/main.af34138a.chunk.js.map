{"version":3,"sources":["components/Form.jsx","components/TodoItem.jsx","components/TodoList.jsx","reducer.js","App.js","serviceWorker.js","index.js"],"names":["Form","addTodo","useState","value","setValue","handleSubmit","e","preventDefault","trim","onSubmit","className","type","onChange","target","onClick","TodoItem","id","title","completed","dispatch","cls","push","join","checked","payload","TodoList","todos","map","todo","key","state","action","Date","now","filter","App","useReducer","reducer","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","todoTitle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4LAyBeA,EAvBF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EACDC,mBAAS,IADR,mBACpBC,EADoB,KACbC,EADa,KAErBC,EAAe,SAACC,GACrBA,EAAEC,iBACEJ,EAAMK,SACTP,EAAQE,GACRC,EAAS,MAGX,OACC,0BAAMK,SAAUJ,GACf,yBAAKK,UAAU,eACd,gDACA,2BACCC,KAAK,OACLR,MAAOA,EACPS,SAAU,SAAAN,GAAC,OAAIF,EAASE,EAAEO,OAAOV,UAElC,4BAAQW,QAAST,EAAcK,UAAU,gBAAe,uBAAGA,UAAU,kBAAb,WCW7CK,EA7BE,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,GAAIC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SAClCC,EAAM,CAAC,QAIb,OAHIF,GACHE,EAAIC,KAAK,WAGT,wBAAIX,UAAWU,EAAIE,KAAK,MACvB,+BACC,2BACCX,KAAK,WACLY,QAASL,EACTN,SAAU,kBAAMO,EAAS,CACxBR,KAAM,SACNa,QAASR,OAIX,8BAAOC,IAER,4BACCH,QAAS,kBAAMK,EAAS,CACvBR,KAAM,SACNa,QAASR,MAEV,uBAAGN,UAAU,2BAAb,aChBWe,EAPE,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOP,EAAc,EAAdA,SACzB,OACC,4BACEO,EAAMC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,eAAUC,IAAKD,EAAKZ,IAAQY,EAA5B,CAAkCT,SAAUA,U,cCNnD,WAACW,EAAOC,GACtB,OAAQA,EAAOpB,MACd,IAAK,MACJ,MAAM,GAAN,mBACImB,GADJ,CAEC,CACCd,GAAIgB,KAAKC,MACThB,MAAOc,EAAOP,QACdN,WAAW,KAGd,IAAK,SACJ,OAAOY,EAAMI,QAAO,SAAAN,GAAI,OAAIA,EAAKZ,KAAOe,EAAOP,WAChD,IAAK,SACJ,OAAOM,EAAMH,KAAI,SAAAC,GAChB,OAAIA,EAAKZ,KAAOe,EAAOP,QACf,eAAII,EAAX,CAAiBV,WAAYU,EAAKV,YAE5BU,KAET,QACC,OAAOE,ICEKK,EAlBH,WAAO,IAAD,EACSC,qBAAWC,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,WAD7D,mBACVX,EADU,KACHX,EADG,KAGjBuB,qBAAU,WACTF,aAAaG,QAAQ,QAASL,KAAKM,UAAUd,MAC3C,CAACA,IAOJ,OAAO,yBAAKpB,UAAU,aACrB,wCACA,kBAAC,EAAD,CAAMT,QARS,SAAC4C,GAChB1B,EAAS,CACRR,KAAM,MACNa,QAASqB,OAMV,kBAAC,EAAD,CAAUnB,MAAOI,EAAOX,SAAUA,M,MCRhB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.af34138a.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nconst Form = ({addTodo}) => {\n\tconst [value, setValue] = useState('')\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault()\n\t\tif (value.trim()) {\n\t\t\taddTodo(value)\n\t\t\tsetValue('')\n\t\t}\n\t}\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<div className='input-field'>\n\t\t\t\t<label>Add your todo</label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tonChange={e => setValue(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<button onClick={handleSubmit} className='btn-floating'><i className='material-icons'>add</i></button>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\nexport default Form","import React from \"react\";\n\nconst TodoItem = ({id, title, completed, dispatch}) => {\n\tconst cls = ['todo']\n\tif (completed) {\n\t\tcls.push('checked')\n\t}\n\treturn (\n\t\t<li className={cls.join(' ')}>\n\t\t\t<label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tchecked={completed}\n\t\t\t\t\tonChange={() => dispatch({\n\t\t\t\t\t\ttype: 'toggle',\n\t\t\t\t\t\tpayload: id\n\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<span>{title}</span>\n\t\t\t</label>\n\t\t\t<button\n\t\t\t\tonClick={() => dispatch({\n\t\t\t\t\ttype: 'remove',\n\t\t\t\t\tpayload: id\n\t\t\t\t})}>\n\t\t\t\t<i className='material-icons text-red'>delete</i>\n\t\t\t</button>\n\t\t</li>\n\t)\n}\nexport default TodoItem","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nconst TodoList = ({todos, dispatch}) => {\n\treturn (\n\t\t<ul>\n\t\t\t{todos.map(todo => <TodoItem key={todo.id} {...todo} dispatch={dispatch}/>)}\n\t\t</ul>\n\t)\n}\nexport default TodoList","export default (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'add':\n\t\t\treturn [\n\t\t\t\t...state,\n\t\t\t\t{\n\t\t\t\t\tid: Date.now(),\n\t\t\t\t\ttitle: action.payload,\n\t\t\t\t\tcompleted: false\n\t\t\t\t}\n\t\t\t];\n\t\tcase 'remove':\n\t\t\treturn state.filter(todo => todo.id !== action.payload)\n\t\tcase 'toggle':\n\t\t\treturn state.map(todo => {\n\t\t\t\tif (todo.id === action.payload) {\n\t\t\t\t\treturn {...todo, completed: !todo.completed}\n\t\t\t\t}\n\t\t\t\treturn todo\n\t\t\t})\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","import React, {useEffect, useReducer} from 'react';\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\nimport reducer from \"./reducer\";\n\nconst App = () => {\n\tconst [state, dispatch] = useReducer(reducer, JSON.parse(localStorage.getItem('todos'))\n\t)\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('todos', JSON.stringify(state))\n\t}, [state])\n\tconst addTodo = (todoTitle) => {\n\t\tdispatch({\n\t\t\ttype: 'add',\n\t\t\tpayload: todoTitle\n\t\t})\n\t}\n\treturn <div className='container'>\n\t\t<h1>Todo app</h1>\n\t\t<Form addTodo={addTodo}/>\n\t\t<TodoList todos={state} dispatch={dispatch}/>\n\t</div>\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}